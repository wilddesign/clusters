package com.wilddesign.clusters;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.bind.annotation.RequestBody;

@Controller // This means that this class is a Controller
@RequestMapping(method = RequestMethod.POST, headers ={"Accept=application/json"}, path = "/dataset") // This means URL's start with /demo (after Application path)
public class MainController {
  @Autowired // This means to get the bean called userRepository
         // Which is auto-generated by Spring, we will use it to handle the data
  private ChemicalBondRepository chemicalBondRepository;
  @Autowired
  private CalculateSphereStatsService calculateSphereStatsService;

  @PostMapping(path="/add") // Map ONLY POST Requests
  public @ResponseBody String addNewChemicalBond (@RequestBody Iterable<ChemicalBond> data) {
    // @ResponseBody means the returned String is the response, not a view name
    // @RequestParam means it is a parameter from the GET or POST request
    chemicalBondRepository.saveAll(data);
    return "Saved";
  }

  @GetMapping(path="/all")
  public @ResponseBody Iterable<ChemicalBond> getAllChemicalBonds() {
    // This returns a JSON or XML with the users
    return chemicalBondRepository.findAll();
  }

  @GetMapping(path="/sphere")
  public @ResponseBody Iterable<ChemicalBond> getCoordinationSphere(@RequestParam String symbol) {
    // This returns a JSON or XML with the users
    // find a bond where symbol1 or symbol2 matches param
    return chemicalBondRepository.findBySymbol1OrSymbol2(symbol, symbol);
  }

  @GetMapping(path="/sphere-stats")
  public @ResponseBody CalculateSphereStatsResultComponent getCoordinationSphereStats(@RequestParam String symbol) {
    // This returns a JSON or XML with the users
    // find a sphere as in above, calculate stats and return
    /*
    finds coordination sphere and pours it into service that calculates mean and stdev
    */
    Iterable<ChemicalBond> coordinationSphere = chemicalBondRepository.findBySymbol1OrSymbol2(symbol, symbol);
    //extract lengths
    Double[] lengths = calculateSphereStatsService.extractLengths(coordinationSphere);
    Double mean = calculateSphereStatsService.calculateMean(lengths);
    Double stdDev = calculateSphereStatsService.calculateStdDev(lengths);

    CalculateSphereStatsResultComponent results = new CalculateSphereStatsResultComponent(mean, stdDev);

    return results;
  }

  @GetMapping(path="/sphere-atom-type")
  public @ResponseBody Iterable<ChemicalBond> getCoordinationSphereByAtomType(@RequestParam String type) {
    // This returns a JSON or XML with the users
    // find a bond where symbol1 or symbol2 matches param
    return chemicalBondRepository.findBySymbol1StartsWithOrSymbol2StartsWith(type, type);
  }

  @GetMapping(path="/sphere-stats-atom-type")
  public @ResponseBody CalculateSphereStatsResultComponent getCoordinationSphereStatsByAtomType(@RequestParam String type) {
    // This returns a JSON or XML with the users
    // find a sphere as in above, calculate stats and return
    /*
    finds coordination sphere and pours it into service that calculates mean and stdev
    */
    //now stats for all atoms of the same type, not just one
    Iterable<ChemicalBond> coordinationSphere = chemicalBondRepository.findBySymbol1StartsWithOrSymbol2StartsWith(type, type);
    //extract lengths
    Double[] lengths = calculateSphereStatsService.extractLengths(coordinationSphere);
    Double mean = calculateSphereStatsService.calculateMean(lengths);
    Double stdDev = calculateSphereStatsService.calculateStdDev(lengths);

    CalculateSphereStatsResultComponent results = new CalculateSphereStatsResultComponent(mean, stdDev);

    return results;
  }
}
