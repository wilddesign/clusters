package com.wilddesign.clusters;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.bind.annotation.RequestBody;
import java.util.ArrayList;
import com.google.common.collect.Lists;
import com.google.common.collect.Iterables;


@Controller // This means that this class is a Controller
@RequestMapping(method = RequestMethod.POST, headers ={"Accept=application/json"}, path = "/dataset") // This means URL's start with /demo (after Application path)
public class MainController {
  @Autowired // This means to get the bean called userRepository
         // Which is auto-generated by Spring, we will use it to handle the data
  private ChemicalBondRepository chemicalBondRepository;
  @Autowired
  private CalculateSphereStatsService calculateSphereStatsService;

  @PostMapping(path="/add") // Map ONLY POST Requests
  public @ResponseBody void addNewChemicalBond (@RequestBody Iterable<ChemicalBond> data) {
    // @ResponseBody means the returned String is the response, not a view name
    // @RequestParam means it is a parameter from the GET or POST request
    chemicalBondRepository.saveAll(data);
    return;
  }

  @GetMapping(path="/all")
  public @ResponseBody Iterable<ChemicalBond> getAllChemicalBonds() {
    // This returns a JSON or XML with the users
    return chemicalBondRepository.findAll();
  }

  @GetMapping(path="/all-delete")
  public @ResponseBody void deleteAllChemicalBonds() {
    // This returns a JSON or XML with the users
    chemicalBondRepository.deleteAll();
    return;
  }

  @GetMapping(path="/sphere")
  public @ResponseBody Iterable<ChemicalBond> getCoordinationSphere(@RequestParam String symbol) {
    // This returns a JSON or XML with the users
    // find a bond where symbol1 or symbol2 matches param
    return chemicalBondRepository.findBySymbol1OrSymbol2(symbol, symbol);
  }

  @GetMapping(path="/sphere-stats")
  public @ResponseBody CalculateSphereStatsResultComponent getCoordinationSphereStats(@RequestParam String symbol) {
    // This returns a JSON or XML with the users
    // find a sphere as in above, calculate stats and return
    /*
    finds coordination sphere and pours it into service that calculates mean and stdev
    */
    Iterable<ChemicalBond> coordinationSphere = chemicalBondRepository.findBySymbol1OrSymbol2(symbol, symbol);
    //extract lengths
    Double[] lengths = calculateSphereStatsService.extractLengths(coordinationSphere);
    Double mean = calculateSphereStatsService.calculateMean(lengths);
    Double stdDev = calculateSphereStatsService.calculateStdDev(lengths);

    CalculateSphereStatsResultComponent results = new CalculateSphereStatsResultComponent(mean, stdDev);

    return results;
  }

  @GetMapping(path="/sphere-atom-type")
  public @ResponseBody Iterable<ChemicalBond> getCoordinationSphereByAtomType(@RequestParam String type) {
    // This returns a JSON or XML with the users
    // find a bond where symbol1 or symbol2 matches param
    return chemicalBondRepository.findByType1OrType2(type, type);
  }

  @GetMapping(path="/sphere-stats-atom-type")
  public @ResponseBody CalculateSphereStatsResultComponent getCoordinationSphereStatsByAtomType(@RequestParam String type) {
    // This returns a JSON or XML with the users
    // find a sphere as in above, calculate stats and return
    /*
    finds coordination sphere and pours it into service that calculates mean and stdev
    */
    //now stats for all atoms of the same type, not just one
    Iterable<ChemicalBond> coordinationSphere = chemicalBondRepository.findByType1OrType2(type, type);
    //extract lengths
    Double[] lengths = calculateSphereStatsService.extractLengths(coordinationSphere);
    Double mean = calculateSphereStatsService.calculateMean(lengths);
    Double stdDev = calculateSphereStatsService.calculateStdDev(lengths);

    CalculateSphereStatsResultComponent results = new CalculateSphereStatsResultComponent(mean, stdDev);

    return results;
  }

  @GetMapping(path="/bond")
  // parsing the data as a graph would be the most general solution, which would allow for any graph paths and traversals, but only M-C-N-M paths are chemically relevant now
  // create an adjacency matrix with the data
  public @ResponseBody ChemicalBond getBond(@RequestParam String symbol1, @RequestParam String symbol2) {
    // find the start bond

    Iterable<ChemicalBond> searchStart1 =  chemicalBondRepository.findBySymbol1AndSymbol2(symbol1, symbol2);
    Iterable<ChemicalBond> searchStart2 =  chemicalBondRepository.findBySymbol2AndSymbol1(symbol1, symbol2);

    ChemicalBond firstSearchStart1 = Iterables.getFirst(searchStart1, null);
    ChemicalBond firstSearchStart2 = Iterables.getFirst(searchStart2, null);

    if(firstSearchStart1 != null) {
      return firstSearchStart1;
    } else if (firstSearchStart2 != null) {
      return firstSearchStart2;
    }
    return null;
  }

  @GetMapping(path="/id")
  // parsing the data as a graph would be the most general solution, which would allow for any graph paths and traversals, but only M-C-N-M paths are chemically relevant now
  // create an adjacency matrix with the data
  public @ResponseBody ChemicalBond getId(@RequestParam Integer id) {
    // find the start bond

    Iterable<ChemicalBond> searchStart1 =  chemicalBondRepository.findAllById(id);

    ChemicalBond firstSearchStart1 = Iterables.getFirst(searchStart1, null);

    if(firstSearchStart1 != null) {
      return firstSearchStart1;
    }
    return null;
  }

  @GetMapping(path="/path")
  // parsing the data as a graph would be the most general solution, which would allow for any graph paths and traversals, but only M-C-N-M paths are chemically relevant now
  // create an adjacency matrix with the data
  public @ResponseBody ChemicalBond[] getPath(@RequestParam String startsymbol1, @RequestParam String startsymbol2, @RequestParam String endsymbol1, @RequestParam String endsymbol2) {
    Iterable<ChemicalBond> data = chemicalBondRepository.findAll();
    ChemicalBond firstEntry = Iterables.getFirst(data, null);
    Integer firstId = 0;
    if(firstEntry != null) {
      firstId = firstEntry.getId(); // database generated ids are counted since the creation of the database, so it has to be normalized
    }

    DatabaseGraph dG = new DatabaseGraph(data);
    // find the start bond

    Iterable<ChemicalBond> searchStart1 =  chemicalBondRepository.findBySymbol1AndSymbol2(startsymbol1, startsymbol2);
    Iterable<ChemicalBond> searchStart2 =  chemicalBondRepository.findBySymbol2AndSymbol1(startsymbol1, startsymbol2);

    ChemicalBond firstSearchStart1 = Iterables.getFirst(searchStart1, null);
    Integer firstSearchStart1Id = 0;
    ChemicalBond firstSearchStart2 = Iterables.getFirst(searchStart2, null);
    Integer firstSearchStart2Id = 0;
    Integer startBond = 0;

    if(firstSearchStart1 != null) {
      startBond = firstSearchStart1.getId();
    } else if (firstSearchStart1 != null) {
      startBond = firstSearchStart2.getId();
    }

    // now find the end bond
    Iterable<ChemicalBond> searchEnd1 =  chemicalBondRepository.findBySymbol1AndSymbol2(endsymbol1, endsymbol2);
    Iterable<ChemicalBond> searchEnd2 =  chemicalBondRepository.findBySymbol2AndSymbol1(endsymbol1, endsymbol2);

    ChemicalBond firstSearchEnd1 = Iterables.getFirst(searchEnd1, null);
    Integer firstSearchEnd1Id = 0;
    ChemicalBond firstSearchEnd2 = Iterables.getFirst(searchEnd2, null);
    Integer firstSearchEnd2Id = 0;
    Integer endBond = 0;

    if(firstSearchEnd1 != null) {
      endBond = firstSearchEnd1.getId();
    } else if (firstSearchEnd2 != null) {
      endBond = firstSearchEnd2.getId();
    }

    Integer[] foundPath = dG.findBFSPath(startBond, endBond, firstId);
    // returns set of integers and ther corrensponding data entries are loaded from the repository
    ChemicalBond[] results = new ChemicalBond[foundPath.length];
    for (Integer j = 0; j<foundPath.length; j++) {

      Integer cId = (foundPath[j] == null)? 0 : foundPath[j];

      Iterable<ChemicalBond> foundById = chemicalBondRepository.findAllById(cId+firstId);
      ChemicalBond entry = Iterables.getFirst(foundById, null);
      if(entry != null) {
        results[j] = entry;
      }

    }
    return results;
  }
}
